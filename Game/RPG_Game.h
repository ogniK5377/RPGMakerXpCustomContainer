#pragma once
#include <array>
#include <cstdint>
#include <Windows.h>
#include <ddraw.h>

namespace Memory {
struct CRxScreen;
struct CNxSurface;
struct CRxSprite;
struct CRxFontList;
struct CRxInput;

struct Game {
    void(__thiscall** vtable)(Game*, signed int);
    HACCEL accelerator_0x66;
    HWND HWND;
    std::array<char, 256> window_name{};
    char field_10E;
    char field_10F;
    char field_110;
    char field_111;
    char field_112;
    char field_113;
    int is_window_active;
    DWORD last_system_time;
    char field_11C;
    char field_11D;
    char field_11E;
    char field_11F;
    char field_120;
    char field_121;
    char field_122;
    char field_123;
    int field_124;
    char field_128;
    char field_129;
    char field_12A;
    char field_12B;
    char field_12C;
    char field_12D;
    char field_12E;
    char field_12F;
    int last_fullscreen_time;
    CRxScreen* RxScreen;
    CNxSurface* surface_1;
    CNxSurface* surface_2;
    CRxSprite* sprite_1;
    CNxSurface* surface_3;
    CRxSprite* sprite_2;
    CRxInput* rx_input;
    CRxFontList* font_list;
    TIMECAPS time_device_compatabilities;
    int smooth_mode;
};
static_assert(sizeof(Game) == 0x160, "Game is an invalid size");

struct CRxInput {
    void* vtable{};
    int has_joy{};
    unsigned int left_deadzone{};
    unsigned int right_deadzone{};
    unsigned int up_deadzone{};
    unsigned int down_deadzone{};
    std::array<unsigned char, 25> button_assignments{};
    std::array<unsigned char, 30> button_state{};
    std::array<unsigned char, 30> current_button_state{};
    std::array<unsigned char, 30> last_button_state{};
    char field_8B{};
    int first_press_on_frame{};
    int first_press_hold_framecount{};
    int dir4{};
    int dir8{};
    int is_moving_sideways{};
};
static_assert(sizeof(CRxInput) == 0xa0, "CRxInput is an invalid size.");

struct CRxScreen {
    void* vtable;
    char field_4;
    char field_5;
    char field_6;
    char field_7;
    RECT rect_2;
    char field_18;
    char field_19;
    char field_1A;
    char field_1B;
    char field_1C;
    char field_1D;
    char field_1E;
    char field_1F;
    char field_20;
    char field_21;
    char field_22;
    char field_23;
    RECT dest_rect;
    char field_34;
    char field_35;
    char field_36;
    char field_37;
    char field_38;
    char field_39;
    char field_3A;
    char field_3B;
    char field_3C;
    char field_3D;
    char field_3E;
    char field_3F;
    char field_40;
    char field_41;
    char field_42;
    char field_43;
    char field_44;
    char field_45;
    char field_46;
    char field_47;
    char field_48;
    char field_49;
    char field_4A;
    char field_4B;
    char field_4C;
    char field_4D;
    char field_4E;
    char field_4F;
    char field_50;
    char field_51;
    char field_52;
    char field_53;
    char field_54;
    char field_55;
    char field_56;
    char field_57;
    char field_58;
    char field_59;
    char field_5A;
    char field_5B;
    char field_5C;
    char field_5D;
    char field_5E;
    char field_5F;
    char field_60;
    char field_61;
    char field_62;
    char field_63;
    char field_64;
    char field_65;
    char field_66;
    char field_67;
    char field_68;
    char field_69;
    char field_6A;
    char field_6B;
    char field_6C;
    char field_6D;
    char field_6E;
    char field_6F;
    char field_70;
    char field_71;
    char field_72;
    char field_73;
    char field_74;
    char field_75;
    char field_76;
    char field_77;
    char field_78;
    char field_79;
    char field_7A;
    char field_7B;
    char field_7C;
    char field_7D;
    char field_7E;
    char field_7F;
    char field_80;
    char field_81;
    char field_82;
    char field_83;
    char field_84;
    char field_85;
    char field_86;
    char field_87;
    char field_88;
    char field_89;
    char field_8A;
    char field_8B;
    char field_8C;
    char field_8D;
    char field_8E;
    char field_8F;
    char field_90;
    char field_91;
    char field_92;
    char field_93;
    char field_94;
    char field_95;
    char field_96;
    char field_97;
    char field_98;
    char field_99;
    char field_9A;
    char field_9B;
    char field_9C;
    char field_9D;
    char field_9E;
    char field_9F;
    char field_A0;
    char field_A1;
    char field_A2;
    char field_A3;
    char field_A4;
    char field_A5;
    char field_A6;
    char field_A7;
    char field_A8;
    char field_A9;
    char field_AA;
    char field_AB;
    char field_AC;
    char field_AD;
    char field_AE;
    char field_AF;
    char field_B0;
    char field_B1;
    char field_B2;
    char field_B3;
    char field_B4;
    char field_B5;
    char field_B6;
    char field_B7;
    char field_B8;
    char field_B9;
    char field_BA;
    char field_BB;
    char field_BC;
    char field_BD;
    char field_BE;
    char field_BF;
    HWND some_hwnd;
    char field_C4;
    char field_C5;
    char field_C6;
    char field_C7;
    int is_full_screen;
    int window_width;
    int window_height;
    char field_D4;
    char field_D5;
    char field_D6;
    char field_D7;
    char field_D8;
    char field_D9;
    char field_DA;
    char field_DB;
    char field_DC;
    char field_DD;
    char field_DE;
    char field_DF;
    char field_E0;
    char field_E1;
    char field_E2;
    char field_E3;
    char field_E4;
    char field_E5;
    char field_E6;
    char field_E7;
    char field_E8;
    char field_E9;
    char field_EA;
    char field_EB;
    char field_EC;
    char field_ED;
    char field_EE;
    char field_EF;
    char field_F0;
    char field_F1;
    char field_F2;
    char field_F3;
    int wait_for_vsync;
    IDirectDraw7* DirectDraw7;
    LPDIRECTDRAWSURFACE7 surface_1;
    LPDIRECTDRAWSURFACE7 surface_2;
};
static_assert(sizeof(CRxScreen) == 0x104, "CRxScreen is an invalid size");

struct CRxFontList {
    void* vtable;
    char field_4;
    char field_5;
    char field_6;
    char field_7;
    char field_8;
    char field_9;
    char field_A;
    char field_B;
    char field_C;
    char field_D;
    char field_E;
    char field_F;
    char field_10;
    char field_11;
    char field_12;
    char field_13;
    char field_14;
    char field_15;
    char field_16;
    char field_17;
    void* linked_list_offset;
    int font_count;
};
static_assert(sizeof(CRxFontList) == 0x20, "CRxFontList is an invalid size");

} // namespace Memory
